import os
import shutil
from PSCMR_Tensorflow_object_trainer import shtlrmv
from PSCMR_Tensorflow_object_trainer import datadir
def label(pypath,query,label_dir1,label_dir,mode,num_steps):
# ________________________________               ______________________________________    
#|________________________________SSD CONFIG FILE______________________________________|
    if mode == 'ssd inception config':
        shtlrmv.shtrmv()
        datadir.dir()
        print("Done")
        file1 = open(pypath+'/'+'PSCMR_Tensorflow_object_trainer/training/'+"label_map.pbtxt",'w') 
        file1.write("item") 
        file1.write("{\n") 
        file1.write("id : 1"+"\n") 
        file1.write("name: "+"'"+query+"'"+"\n") 
        file1.write("}\n")
        file1.close()
        
        config1 = root_dir+'/'+'PSCMR_Tensorflow_object_trainer/training/'
        file = open(config1+"ssd_inception_v2_coco.config",'w')
        file.write("model {\n")
        file.write("  ssd {\n")
        file.write("    num_classes: 90\n")
        file.write("    box_coder {\n")
        file.write("      faster_rcnn_box_coder {\n")
        file.write("        y_scale: 10.0\n")
        file.write("        x_scale: 10.0\n")
        file.write("        height_scale: 5.0\n")
        file.write("        width_scale: 5.0\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    matcher {\n")
        file.write("      argmax_matcher {\n")
        file.write("        matched_threshold: 0.5\n")
        file.write("        unmatched_threshold: 0.5\n")
        file.write("        ignore_thresholds: false\n")
        file.write("        negatives_lower_than_unmatched: true\n")
        file.write("        force_match_for_each_row: true\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    similarity_calculator {\n")
        file.write("      iou_similarity {\n")  
        file.write("      }\n")
        file.write("    }\n")
        file.write("    anchor_generator {\n")

        file.write("      ssd_anchor_generator {\n")
        file.write("        num_layers: 6\n")
        file.write("        min_scale: 0.2\n")
        file.write("        max_scale: 0.95\n")

        file.write("        aspect_ratios: 1.0\n")
        file.write("        aspect_ratios: 2.0\n")
        file.write("        aspect_ratios: 0.5\n")
        file.write("        aspect_ratios: 3.0\n")
        file.write("        aspect_ratios: 0.3333\n")

        file.write("        reduce_boxes_in_lowest_layer: true\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    image_resizer {\n")
        file.write("      fixed_shape_resizer {\n")
        file.write("        height: 300\n")
        file.write("        width: 300\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    box_predictor {\n")
        file.write("      convolutional_box_predictor {\n")
        file.write("        min_depth: 0\n")
        file.write("        max_depth: 0\n")
        file.write("        num_layers_before_predictor: 0\n")
        file.write("        use_dropout: false\n")

        file.write("        dropout_keep_probability: 0.8\n")
        file.write("        kernel_size: 3\n")
        file.write("        box_code_size: 4\n")
        file.write("        apply_sigmoid_to_scores: false\n")
        file.write("        conv_hyperparams {\n")
        file.write("          activation: RELU_6,\n")

        file.write("          regularizer {\n")
        file.write("            l2_regularizer {\n")
        file.write("              weight: 0.00004\n")
        file.write("            }\n")
        file.write("          }\n")

        file.write("          initializer {\n")
        file.write("            truncated_normal_initializer {\n")
        file.write("              stddev: 0.03\n")
        file.write("              mean: 0.0\n")
        file.write("            }\n")
        file.write("          }\n")

        file.write("        }\n")
        file.write("      }\n")
        file.write("    }\n")

        file.write("    feature_extractor {\n")
        file.write("      type: 'ssd_inception_v2'\n")
        file.write("      min_depth: 16\n")
        file.write("      depth_multiplier: 1.0\n")
        file.write("      conv_hyperparams {\n")
        file.write("        activation: RELU_6,\n")

        file.write("        regularizer {\n")
        file.write("          l2_regularizer {\n")
        file.write("            weight: 0.00004\n")
        file.write("          }\n")
        file.write("        }\n")

        file.write("        initializer {\n")
        file.write("          truncated_normal_initializer {\n")
        file.write("            stddev: 0.03\n")
        file.write("            mean: 0.0\n")
    
        file.write("          }\n")
        file.write("        }\n")
        file.write("        batch_norm {\n")
        file.write("          train: true,\n")
        file.write("          scale: true,\n")
        file.write("          center: true,\n")

        file.write("          decay: 0.9997,\n")
        file.write("          epsilon: 0.001,\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("      override_base_feature_extractor_hyperparams: true\n")
        file.write("    }\n")
        file.write("    loss {\n")

        file.write("      classification_loss {\n")
        file.write("        weighted_sigmoid {\n")
        file.write("        }\n")

        file.write("      }\n")
        file.write("      localization_loss {\n")
        file.write("        weighted_smooth_l1 {\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("      hard_example_miner {\n")

        file.write("        num_hard_examples: 3000\n")
        file.write("        iou_threshold: 0.99\n")
        file.write("        loss_type: CLASSIFICATION\n")
        file.write("        max_negatives_per_positive: 3\n")
        file.write("        min_negatives_per_image: 0\n")
        file.write("      }\n")
        file.write("      classification_weight: 1.0\n")
        file.write("      localization_weight: 1.0\n")
        file.write("    }\n")
        file.write("    normalize_loss_by_num_matches: true\n")
        file.write("    post_processing {\n")
        file.write("      batch_non_max_suppression {\n")
        file.write("        score_threshold: 1e-8\n")
        file.write("        iou_threshold: 0.6\n")
        file.write("        max_detections_per_class: 100\n")
        file.write("        max_total_detections: 100\n")
        file.write("      }\n")
        file.write("      score_converter: SIGMOID\n")
        file.write("    }\n")
        file.write("  }\n")
        file.write("}\n")


        file.write("train_config: {\n")
        file.write("  batch_size: 24\n")
        file.write("  optimizer {\n")
        file.write("    rms_prop_optimizer: {\n")
        file.write("      learning_rate: {\n")
        file.write("        exponential_decay_learning_rate {\n")
        file.write("          initial_learning_rate: 0.004\n")
        file.write("          decay_steps: 800720\n")
        file.write("          decay_factor: 0.95\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("      momentum_optimizer_value: 0.9\n")
        file.write("      decay: 0.9\n")
        file.write("      epsilon: 1.0\n")
        file.write("    }\n")
        file.write("  }\n")
        file.write("  fine_tune_checkpoint: "+'"'+root_dir+'/'+'PSCMR_Tensorflow_object_trainer/trainig/'+'ssd_inception_v2_coco_2018_01_28/model.ckpt'+'"'+"\n")
        file.write("  from_detection_checkpoint: true\n")
        file.write("  num_steps: "+num_steps+"\n")
        file.write("  data_augmentation_options {\n")
        file.write("    random_horizontal_flip {\n")
        file.write("    }\n")
        file.write("  }\n")
        file.write("  data_augmentation_options {\n")
        file.write("    ssd_random_crop {\n")
        file.write("    }\n")
        file.write("  }\n")
        file.write("}\n")
        file.write("train_input_reader: {\n")
        file.write("  tf_record_input_reader {\n")
        file.write("    input_path: "+'"'+label_dir1+'/'+'trainrecord.record'+'"'+"\n")
        file.write("  }\n")
        file.write("  label_map_path: "+'"'+root_dir+"/PSCMR_Tensorflow_object_trainer/training/"+"label_map.pbtxt"+'"'+"\n")
        file.write("}\n")
        file.write("eval_config: {\n")
        file.write("  num_examples: 8000\n")
        file.write("  max_evals: 10\n")
        file.write("}\n")
        file.write("eval_input_reader: {\n")
        file.write("  tf_record_input_reader {\n")
        file.write("    input_path: "+'"'+label_dir+'/'+'testrecord.record'+'"'+"\n")
        file.write("  }\n")
        file.write("  label_map_path: "+'"'+root_dir+"/PSCMR_Tensorflow_object_trainer/training/"+"label_map.pbtxt"+'"'+"\n")
        file.write("  shuffle: false\n")
        file.write("  num_readers: 1\n")
        file.write("}\n")
        file.close()
        return ("ssd_inception_v2_coco.config")
# ______________________________                  _________________________________              
#|______________________________FASTER RNCC CONFIG_________________________________|
        
    if mode == 'faster rncc config':
        shtlrmv.shtrmv(pypath)
        datadir.dir(pypath)
        print("Done")
        file1 = open(pypath+'/'+'PSCMR_Tensorflow_object_trainer/training/'+"label_map.pbtxt",'w') 
        file1.write("item") 
        file1.write("{\n") 
        file1.write("id : 1"+"\n") 
        file1.write("name: "+"'"+query+"'"+"\n") 
        file1.write("}\n")
        file1.close()

        config2 = pypath+'/'+'PSCMR_Tensorflow_object_trainer/training/'
        file = open(config2+"faster_rncc_inception_v2_pets.config",'w')
        file.write("model {\n")
        file.write("  faster_rcnn {\n")
        file.write("    num_classes: 1\n")
        file.write("    image_resizer {\n")
        file.write("      keep_aspect_ratio_resizer {\n")
        file.write("        min_dimension: 600\n")
        file.write("        max_dimension: 1024\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    feature_extractor {\n")
        file.write("      type: 'faster_rcnn_inception_v2'\n")
        file.write("      first_stage_features_stride: 16\n")
        file.write("    }\n")
        file.write("    first_stage_anchor_generator {\n")
        file.write("      grid_anchor_generator {\n")
        file.write("        scales: [0.25, 0.5, 1.0, 2.0]\n")
        file.write("        aspect_ratios: [0.5, 1.0, 2.0]\n")
        file.write("        height_stride: 16\n")
        file.write("        width_stride: 16\n")
        file.write("      }\n")
        file.write("    }\n")

        file.write("    first_stage_box_predictor_conv_hyperparams {\n")
        file.write("      op: CONV\n")
        file.write("      regularizer {\n")
        file.write("        l2_regularizer {\n")
        file.write("          weight: 0.0\n")
        file.write("        }\n")
        file.write("      }\n")

        file.write("      initializer {\n")
        file.write("        truncated_normal_initializer {\n")
        file.write("          stddev: 0.01\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("    }\n")


        file.write("    first_stage_nms_score_threshold: 0.0\n")
        file.write("    first_stage_nms_iou_threshold: 0.7\n")
        file.write("    first_stage_max_proposals: 300\n")
        file.write("    first_stage_localization_loss_weight: 2.0\n")

        file.write("    first_stage_objectness_loss_weight: 1.0\n")
        file.write("    initial_crop_size: 14\n")
        file.write("    maxpool_kernel_size: 2\n")
        file.write("    maxpool_stride: 2\n")

        file.write("    second_stage_box_predictor {\n")    
        file.write("      mask_rcnn_box_predictor {\n")
        file.write("        use_dropout: false\n")

        file.write("        dropout_keep_probability: 1.0\n")
        file.write("        fc_hyperparams {\n")
        file.write("          op: FC\n")
        file.write("          regularizer {\n")
        file.write("            l2_regularizer {\n")

        file.write("              weight: 0.0\n")
        file.write("            }\n")
        file.write("          }\n")
        file.write("          initializer {\n")

        file.write("            variance_scaling_initializer {\n")
        file.write("              factor: 1.0\n")


        file.write("              uniform: true\n")
        file.write("              mode: FAN_AVG\n")
        file.write("            }\n")   
        file.write("          }\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("    }\n")
        file.write("    second_stage_post_processing {\n")
        file.write("      batch_non_max_suppression {\n")
        file.write("        score_threshold: 0.0\n")
        file.write("        iou_threshold: 0.6\n")
        file.write("        max_detections_per_class: 100\n")
        file.write("        max_total_detections: 300\n")
        file.write("      }\n")
        file.write("      score_converter: SOFTMAX\n")
        file.write("    }\n")
        file.write("    second_stage_localization_loss_weight: 2.0\n")
        file.write("    second_stage_classification_loss_weight: 1.0\n")
        file.write("  }\n")
        file.write("}\n")




        file.write("train_config: {\n")
        file.write("  batch_size: 1\n")
        file.write("  optimizer {\n")
        file.write("    momentum_optimizer: {\n")
        file.write("      learning_rate: {\n")
        file.write("        manual_step_learning_rate {\n")
        file.write("          initial_learning_rate: 0.0002\n")
        file.write("          schedule {\n")
        file.write("            step: 900000\n")
        file.write("            learning_rate: .00002\n")
        file.write("          }\n")
        file.write("          schedule {\n")
        file.write("            step: 1200000\n")
        file.write("            learning_rate: .000002\n")
        file.write("          }\n")
        file.write("        }\n")
        file.write("      }\n")
        file.write("      momentum_optimizer_value: 0.9\n")
        file.write("    }\n")
        file.write("    use_moving_average: false\n")
        file.write("  }\n")
        file.write("  gradient_clipping_by_norm: 10.0\n")
        file.write("  fine_tune_checkpoint:"+'"'+pypath+'/PSCMR_Tensorflow_object_trainer/'+'training/'+'faster_rcnn_inception_v2_coco_2018_01_28/model.ckpt'+'"'+"\n")
        file.write("  from_detection_checkpoint: true\n")
        file.write("  load_all_detection_checkpoint_vars: true\n")
        file.write("  num_steps: "+num_steps+"\n")
        file.write("  data_augmentation_options {\n")
        file.write("    random_horizontal_flip {\n")
        file.write("    }\n")
        file.write("  }\n")
        file.write("}\n")
        file.write("train_input_reader: {\n")
        file.write("  tf_record_input_reader {\n")
        file.write("    input_path: "+'"'+label_dir1+'/trainrecord.record'+'"'+"\n")
        file.write("  }\n")
        file.write("  label_map_path: "+'"'+pypath+"/PSCMR_Tensorflow_object_trainer/training/"+"label_map.pbtxt"+'"'+"\n")
        file.write("}\n")
        file.write("eval_config: {\n")
        file.write("  metrics_set: "+'"'+"coco_detection_metrics"+'"'+"\n")
        file.write("  num_examples: 1101\n")
        file.write("}\n")
        file.write("eval_input_reader: {\n")
        file.write("  tf_record_input_reader {\n")
        file.write("    input_path: "+'"'+label_dir+'/'+'testrecord.record'+'"'+"\n")
        file.write("  }\n")
        file.write("  label_map_path: "+'"'+pypath+"/PSCMR_Tensorflow_object_trainer/training/"+"label_map.pbtxt"+'"'+"\n")
        file.write("  shuffle: false\n")
        file.write("  num_readers: 1\n")
        file.write("}\n")
        file.close()
        return("faster_rncc_inception_v2_pets.config")









